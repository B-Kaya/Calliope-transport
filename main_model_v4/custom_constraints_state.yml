variables:
  ship_depart:
    description: "1 if a ship departs with an aluminium shipment from Iceland in this timestep, else 0"
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND nodes=Iceland
    domain: integer # bound to 0-1 to make it binary
    bounds:
      min: 0
      max: 1

  ship_available:
    description: "Number of ships available at origin (Iceland) at a given timestep"
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND nodes=Iceland
    domain: integer # non-negative integer
    bounds:
      min: 0
      max: 1 # number of ships, 1 in this case

constraints:
  shipping_capacity_link:
    description: "Allow aluminium flow out of Iceland only when a ship departs (enforce discrete ship usage)"
    foreach: [nodes, techs, timesteps]
    where: techs=aluminium_transport_tech
    equations:
      - expression: flow_out[nodes=Iceland, carriers=aluminium] <= ship_depart * 20000 # Use the max flow of the tech as capacity, 20000 in this case

  ship_roundtrip_cycle:
    description: >
      Ensures the ship returns to origin before another departure can occur.
      ship_available(t) = ship_available(t-1) + (returning ship at t) - (departing ship at t).
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND nodes=Iceland
    equations:
      - expression: ship_available == $prev_available + $ship_returned - ship_depart
    sub_expressions:
      prev_available:
        # For t=0, set initial number of ships; for t>0, use previous timestep's availability
        - where: timesteps = get_val_at_index(timesteps=0) # first timestep
          expression: "1" # number of ships
        - where: NOT timesteps = get_val_at_index(timesteps=0)
          expression: roll(ship_available, timesteps=1) # ship_available at t-1
      ship_returned:
        # ship_returned at time t equals ship_depart at time t - 72 (a ship that left 72 hours ago returns now)
        - expression: default_if_empty(roll(ship_depart, timesteps=144), default=0)
        # use 2*72 = 144 for the return (round-trip). The roll shifts departures forward by 144h.