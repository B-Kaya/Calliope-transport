variables:
  ship_depart:
    description: "1 if a ship departs with an aluminium shipment from Iceland in this timestep, else 0"
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND locations=Iceland
    domain: integer   # integer domain (we will bound it 0-1 to make it binary)&#8203;:contentReference[oaicite:5]{index=5}
    bounds:
      min: 0
      max: 1

  ship_available:
    description: "Number of ships available at origin (Iceland) at a given timestep"
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND locations=Iceland
    domain: integer   # non-negative integer
    bounds:
      min: 0
      max: 1  # number of ships e.g. 1 in this case (from parameters.yml)

constraints:
  # Link between ship_depart and actual aluminium flow: only depart if carrying aluminium (and vice versa)
  shipping_capacity_link:
    description: "Allow aluminium flow out of Iceland only when a ship departs (enforce discrete ship usage)"
    foreach: [nodes, techs, timesteps]
    where: techs=aluminium_transport_tech AND locations=Iceland
    equations:
      - expression: flow_out[carriers=aluminium] <= ship_depart * 10000
    # (Optional: You can define ship_capacity as the tonnage a ship can carry per trip. 
    # If not defined, use the max flow of the tech as capacity.)

  # Ship availability state update (round-trip accounting)
  ship_roundtrip_cycle:
    description: >
      Ensures the ship returns to origin before another departure can occur.
      ship_available(t) = ship_available(t-1) + (returning ship at t) - (departing ship at t).
    foreach: [techs, timesteps]
    where: techs=aluminium_transport_tech AND locations=Iceland
    equations:
      - expression: ship_available == $prev_available + $ship_returned - ship_depart
    sub_expressions:
      prev_available:
        # For t=0, set initial number of ships; for t>0, use previous timestep's availability
        - where: timesteps = get_val_at_index(timesteps=0)  # first timestep&#8203;:contentReference[oaicite:6]{index=6}
          expression: "1"  # number of ships, initial ships at origin (e.g. 1)
        - where: NOT timesteps = get_val_at_index(timesteps=0)
          expression: roll(ship_available, timesteps=1)  # ship_available at t-1&#8203;:contentReference[oaicite:7]{index=7}
      ship_returned:
        # ship_returned at time t equals ship_depart at time t - travel_time (i.e., a ship that left travel_time hours ago returns now)
        - expression: default_if_empty(roll(ship_depart, timesteps=144), default=0)
        # We use 2*travel_time = 144 for the return (round-trip). The roll shifts departures forward by 144h.